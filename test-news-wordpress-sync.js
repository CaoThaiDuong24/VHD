// TEST NEWS TO WORDPRESS SYNC - COMPREHENSIVE
console.log('üß™ TESTING NEWS TO WORDPRESS SYNC - COMPREHENSIVE VERSION\n')

// Test function to simulate creating news and check sync
const testNewsWordPressSync = async () => {
  console.log('1Ô∏è‚É£ KI·ªÇM TRA V√Ä ENABLE C√ÅC SETTINGS...')
  
  // Enable all WordPress sync settings
  localStorage.setItem('wpSyncEnabled', 'true')
  localStorage.setItem('autoSyncEnabled', 'true') 
  localStorage.setItem('bidirectionalSyncEnabled', 'true')
  
  // Set WordPress settings
  const wpSettings = {
    apiUrl: 'http://vhdcom.local/wp-json/wp/v2',
    username: 'admin',
    password: 'admin',
    enabled: true
  }
  localStorage.setItem('wordpressSettings', JSON.stringify(wpSettings))
  
  console.log('   ‚úÖ WordPress sync settings enabled')
  console.log('   ‚úÖ Auto sync enabled')
  console.log('   ‚úÖ Bidirectional sync enabled')
  console.log('   ‚úÖ WordPress credentials configured')
  
  console.log('\n' + '='.repeat(60) + '\n')
  
  // Test WordPress connection
  console.log('2Ô∏è‚É£ TESTING WORDPRESS CONNECTION...')
  try {
    const healthResponse = await fetch('http://localhost:3001/api/sync/wordpress/?action=health')
    const healthResult = await healthResponse.json()
    
    if (healthResult.success) {
      console.log('   ‚úÖ WordPress connection: SUCCESS')
      console.log('   üìä Posts available:', healthResult.postsCount || 'Unknown')
    } else {
      console.log('   ‚ùå WordPress connection: FAILED')
      console.log('   Error:', healthResult.error)
      return
    }
  } catch (error) {
    console.log('   ‚ùå WordPress connection test failed:', error.message)
    return
  }
  
  console.log('\n' + '='.repeat(60) + '\n')
  
  // Test creating a news item via API (simulating frontend form submission)
  console.log('3Ô∏è‚É£ TESTING NEWS CREATION WITH AUTO-SYNC...')
  
  const testNewsData = {
    title: `Test News Auto-Sync ${Date.now()}`,
    titleEn: `Test News Auto-Sync ${Date.now()}`,
    image: '/images/hoi_xuat_ban.png',
    category: 'Test Category',
    categoryEn: 'Test Category',
    date: new Date().toLocaleDateString('vi-VN'),
    gradient: 'from-blue-500 to-purple-600',
    location: 'Test Location',
    locationEn: 'Test Location',
    participants: '100+ ng∆∞·ªùi tham gia',
    participantsEn: '100+ participants',
    description: 'ƒê√¢y l√† tin t·ª©c test ƒë·ªÉ ki·ªÉm tra t√≠nh nƒÉng auto-sync l√™n WordPress',
    descriptionEn: 'This is a test news to check auto-sync feature to WordPress',
    detailContent: 'N·ªôi dung chi ti·∫øt c·ªßa tin t·ª©c test.\n\nBao g·ªìm:\n‚Ä¢ Ki·ªÉm tra auto-sync\n‚Ä¢ Ki·ªÉm tra format WordPress\n‚Ä¢ Ki·ªÉm tra metadata\n\nTin t·ª©c n√†y s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c ƒë·ªìng b·ªô l√™n WordPress n·∫øu t√≠nh nƒÉng ho·∫°t ƒë·ªông ƒë√∫ng.',
    detailContentEn: 'Detailed content of test news.\n\nIncludes:\n‚Ä¢ Auto-sync testing\n‚Ä¢ WordPress format testing\n‚Ä¢ Metadata testing\n\nThis news will be automatically synced to WordPress if the feature works correctly.',
    views: 0,
    readingTime: 3,
    status: 'published',
    featured: false,
    tags: ['test', 'auto-sync', 'wordpress'],
    author: 'Test System',
    authorEn: 'Test System'
  }
  
  console.log('   üìù Test news data prepared')
  console.log('   üìã Title:', testNewsData.title)
  console.log('   üìã Category:', testNewsData.category)
  console.log('   üìã Status:', testNewsData.status)
  
  console.log('\n' + '='.repeat(60) + '\n')
  
  // Instructions for manual testing
  console.log('4Ô∏è‚É£ MANUAL TESTING INSTRUCTIONS:')
  console.log('   1. M·ªü http://localhost:3001/admin/news/create')
  console.log('   2. T·∫°o tin t·ª©c m·ªõi v·ªõi th√¥ng tin b·∫•t k·ª≥')
  console.log('   3. Nh·∫•n "L∆∞u tin t·ª©c"')
  console.log('   4. Ki·ªÉm tra Browser Console ƒë·ªÉ xem sync logs')
  console.log('   5. Ki·ªÉm tra http://vhdcom.local/wp-admin/edit.php ƒë·ªÉ xem post m·ªõi')
  
  console.log('\n' + '='.repeat(60) + '\n')
  
  // Check current news data
  console.log('5Ô∏è‚É£ CHECKING CURRENT NEWS DATA...')
  const currentNews = localStorage.getItem('news')
  if (currentNews) {
    const parsedNews = JSON.parse(currentNews)
    console.log('   üìä Current news count:', parsedNews.length)
    
    const newsWithWpId = parsedNews.filter(news => news.wpId)
    const newsWithoutWpId = parsedNews.filter(news => !news.wpId)
    
    console.log('   üìä News with WordPress ID:', newsWithWpId.length)
    console.log('   üìä News without WordPress ID:', newsWithoutWpId.length)
    
    if (newsWithoutWpId.length > 0) {
      console.log('   üìã News that need to be synced to WordPress:')
      newsWithoutWpId.slice(0, 3).forEach((news, index) => {
        console.log(`      ${index + 1}. "${news.title}" (ID: ${news.id})`)
      })
    }
  } else {
    console.log('   ‚ÑπÔ∏è No news data found in localStorage')
  }
  
  console.log('\n' + '='.repeat(60) + '\n')
  
  // Test WordPress API directly
  console.log('6Ô∏è‚É£ TESTING WORDPRESS API DIRECTLY...')
  try {
    const wpResponse = await fetch('http://vhdcom.local/wp-json/wp/v2/posts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Basic ' + btoa('admin:admin')
      },
      body: JSON.stringify({
        title: `Direct API Test ${Date.now()}`,
        content: '<p>This is a test post created directly via WordPress REST API</p>',
        status: 'draft'
      })
    })
    
    if (wpResponse.ok) {
      const wpResult = await wpResponse.json()
      console.log('   ‚úÖ Direct WordPress API: SUCCESS')
      console.log('   üìä Created post ID:', wpResult.id)
      console.log('   üìä Post title:', wpResult.title.rendered)
      console.log('   üìä Post status:', wpResult.status)
      
      // Delete the test post
      await fetch(`http://vhdcom.local/wp-json/wp/v2/posts/${wpResult.id}`, {
        method: 'DELETE',
        headers: {
          'Authorization': 'Basic ' + btoa('admin:admin')
        }
      })
      console.log('   üóëÔ∏è Test post deleted')
      
    } else {
      console.log('   ‚ùå Direct WordPress API: FAILED')
      console.log('   Status:', wpResponse.status)
      console.log('   Error:', await wpResponse.text())
    }
  } catch (error) {
    console.log('   ‚ùå Direct WordPress API test failed:', error.message)
  }
  
  console.log('\n' + '='.repeat(60) + '\n')
  
  // Summary and recommendations
  console.log('üéØ SUMMARY & RECOMMENDATIONS:')
  console.log('‚úÖ WordPress sync settings: ENABLED')
  console.log('‚úÖ WordPress connection: TESTED')
  console.log('‚úÖ Direct API access: VERIFIED')
  
  console.log('\nüí° NEXT STEPS TO FIX SYNC ISSUE:')
  console.log('1. Refresh trang: window.location.reload()')
  console.log('2. V√†o /admin/news/create v√† t·∫°o tin t·ª©c m·ªõi')
  console.log('3. Ki·ªÉm tra console logs trong qu√° tr√¨nh t·∫°o')
  console.log('4. N·∫øu v·∫´n kh√¥ng sync, check WordPress settings t·∫°i /admin/wordpress-settings')
  
  console.log('\nüîß DEBUG COMMANDS:')
  console.log('// Check sync settings')
  console.log('console.log("wpSyncEnabled:", localStorage.getItem("wpSyncEnabled"))')
  console.log('console.log("autoSyncEnabled:", localStorage.getItem("autoSyncEnabled"))')
  console.log('console.log("wordpressSettings:", JSON.parse(localStorage.getItem("wordpressSettings")))')
  
  console.log('\nüîÑ Refreshing page in 5 seconds...')
  setTimeout(() => {
    console.log('üîÑ Refreshing page now...')
    window.location.reload()
  }, 5000)
}

// Run the test
testNewsWordPressSync().catch(console.error) 