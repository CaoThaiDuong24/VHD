'use client'

import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Switch } from '@/components/ui/switch'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { 
  Settings, 
  Save, 
  TestTube, 
  Cloud, 
  CloudOff,
  AlertCircle,
  CheckCircle,
  Info,
  RefreshCw,
  ExternalLink,
  Copy,
  AlertTriangle,
  Zap,
  Activity,
  Calendar
} from 'lucide-react'
import { useToast } from '@/components/ui/use-toast'
import { useNews } from '@/contexts/NewsContext'
import { useEvents } from '@/contexts/EventsContext'
import AutoSyncManager from '@/components/ui/AutoSyncManager'
import DataImportManager from '@/components/ui/DataImportManager'

interface WordPressSettings {
  apiUrl: string
  username: string
  password: string
  enabled: boolean
}

interface TestResult {
  status: 'success' | 'error'
  message: string
  details?: string
  suggestions?: string[]
}

export default function WordPressSettingsPage() {
  const { toast } = useToast()
  const { 
    wpSyncEnabled, 
    toggleWordPressSync, 
    autoSyncEnabled, 
    toggleAutoSync, 
    bidirectionalSyncEnabled,
    toggleBidirectionalSync,
    lastSyncStatus,
    syncWithWordPress,
    syncFromWordPress,
    syncBidirectional,
    isLoading: isSyncing
  } = useNews()
  
  // Events sync controls
  const { 
    wpSyncEnabled: eventsWpSyncEnabled, 
    toggleWordPressSync: toggleEventsWordPressSync, 
    autoSyncEnabled: eventsAutoSyncEnabled, 
    toggleAutoSync: toggleEventsAutoSync, 
    lastSyncStatus: eventsLastSyncStatus,
    syncWithWordPress: syncEventsWithWordPress,
    isLoading: isEventsSyncing
  } = useEvents()
  
  const [settings, setSettings] = useState<WordPressSettings>({
    apiUrl: '',
    username: '',
    password: '',
    enabled: false
  })
  const [isLoading, setIsLoading] = useState(false)
  const [isTestingConnection, setIsTestingConnection] = useState(false)
  const [testResult, setTestResult] = useState<TestResult | null>(null)

  // Load settings from localStorage
  useEffect(() => {
    const savedSettings = localStorage.getItem('wordpressSettings')
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings)
        setSettings(parsed)
      } catch (error) {
        console.error('Error loading WordPress settings:', error)
      }
    }

    // üöÄ AUTO ENABLE SYNC SETTINGS - FIX FOR AUTO SYNC ISSUE
    console.log('üîß Auto-enabling WordPress sync settings...')
    
    // Check current settings
    const currentWpSync = localStorage.getItem('wpSyncEnabled')
    const currentAutoSync = localStorage.getItem('autoSyncEnabled')
    const currentBidirectional = localStorage.getItem('bidirectionalSyncEnabled')
    
    // Auto enable if not already set
    if (currentWpSync !== 'true') {
      localStorage.setItem('wpSyncEnabled', 'true')
      console.log('‚úÖ wpSyncEnabled set to true')
    }
    
    if (currentAutoSync !== 'true') {
      localStorage.setItem('autoSyncEnabled', 'true')
      console.log('‚úÖ autoSyncEnabled set to true')
    }
    
    if (currentBidirectional !== 'true') {
      localStorage.setItem('bidirectionalSyncEnabled', 'true')
      console.log('‚úÖ bidirectionalSyncEnabled set to true')
    }
    
    // Show confirmation
    if (currentWpSync !== 'true' || currentAutoSync !== 'true' || currentBidirectional !== 'true') {
      console.log('üéâ WordPress auto sync ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t t·ª± ƒë·ªông!')
      setTimeout(() => {
        toast({
          title: "üöÄ Auto Sync Activated",
          description: "WordPress auto sync ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t t·ª± ƒë·ªông. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ t·∫°o news v√† s·∫Ω t·ª± ƒë·ªông sync v·ªõi WordPress!",
        })
      }, 1000)
    }
  }, [])

  // Keyboard shortcut for saving settings (Ctrl+S)
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.ctrlKey && e.key === 's') {
        e.preventDefault()
        if (!isLoading && settings.apiUrl.trim() && settings.username.trim() && settings.password.trim()) {
          handleSaveSettings()
          toast({
            title: "Ph√≠m t·∫Øt",
            description: "ƒê√£ l∆∞u c√†i ƒë·∫∑t b·∫±ng Ctrl+S",
          })
        } else {
          toast({
            title: "Kh√¥ng th·ªÉ l∆∞u",
            description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin tr∆∞·ªõc khi l∆∞u",
            variant: "destructive",
          })
        }
      }
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [isLoading, settings])

  const validateApiUrl = (url: string): boolean => {
    try {
      const urlObj = new URL(url)
      return urlObj.pathname.includes('/wp-json/wp/v2') || urlObj.pathname.includes('/wp-json/wp/v2/')
    } catch {
      return false
    }
  }

  const normalizeApiUrl = (url: string): string => {
    if (!url) return url
    
    // Remove trailing slash
    url = url.replace(/\/$/, '')
    
    // If it doesn't end with wp-json/wp/v2, add it
    if (!url.includes('/wp-json/wp/v2')) {
      if (url.includes('/wp-json')) {
        url = url.replace('/wp-json', '/wp-json/wp/v2')
      } else {
        url = url + '/wp-json/wp/v2'
      }
    }
    
    return url
  }

  const handleSaveSettings = async () => {
    setIsLoading(true)
    
    try {
      // Validation
      if (!settings.apiUrl.trim()) {
        toast({
          title: "L·ªói",
          description: "Vui l√≤ng nh·∫≠p URL WordPress",
          variant: "destructive",
        })
        return
      }

      if (!settings.username.trim()) {
        toast({
          title: "L·ªói", 
          description: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p",
          variant: "destructive",
        })
        return
      }

      if (!settings.password.trim()) {
        toast({
          title: "L·ªói",
          description: "Vui l√≤ng nh·∫≠p Application Password",
          variant: "destructive",
        })
        return
      }

      // Normalize API URL before saving
      const normalizedSettings = {
        ...settings,
        apiUrl: normalizeApiUrl(settings.apiUrl.trim()),
        username: settings.username.trim(),
        password: settings.password.trim()
      }
      
      // Test connection before saving (optional but recommended)
      if (settings.enabled) {
        toast({
          title: "ƒêang ki·ªÉm tra...",
          description: "ƒêang x√°c th·ª±c k·∫øt n·ªëi WordPress...",
        })

        try {
          const testResponse = await fetch(`${normalizedSettings.apiUrl}/posts?per_page=1`, {
            method: 'GET',
            headers: {
              'Authorization': `Basic ${btoa(`${normalizedSettings.username}:${normalizedSettings.password}`)}`,
              'Content-Type': 'application/json',
            },
          })

          if (!testResponse.ok) {
            const errorText = await testResponse.text()
            toast({
              title: "C·∫£nh b√°o",
              description: `Kh√¥ng th·ªÉ k·∫øt n·ªëi WordPress (${testResponse.status}), nh∆∞ng settings ƒë√£ ƒë∆∞·ª£c l∆∞u. Vui l√≤ng ki·ªÉm tra l·∫°i.`,
              variant: "destructive",
            })
            console.warn('WordPress connection test failed:', errorText)
          }
        } catch (connectionError) {
          toast({
            title: "C·∫£nh b√°o", 
            description: "Kh√¥ng th·ªÉ x√°c th·ª±c k·∫øt n·ªëi, nh∆∞ng settings ƒë√£ ƒë∆∞·ª£c l∆∞u. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi.",
            variant: "destructive",
          })
          console.warn('WordPress connection test error:', connectionError)
        }
      }

      // Save to localStorage
      localStorage.setItem('wordpressSettings', JSON.stringify(normalizedSettings))
      setSettings(normalizedSettings)
      
      // Update WordPress sync status if enabled
      if (normalizedSettings.enabled && wpSyncEnabled !== true) {
        toggleWordPressSync()
      } else if (!normalizedSettings.enabled && wpSyncEnabled !== false) {
        toggleWordPressSync()
      }
      
      toast({
        title: "Th√†nh c√¥ng",
        description: `C√†i ƒë·∫∑t WordPress ƒë√£ ƒë∆∞·ª£c l∆∞u ${normalizedSettings.enabled ? 'v√† k√≠ch ho·∫°t' : ''}`,
      })

      // Log settings for debugging
      console.log('‚úÖ WordPress settings saved:', {
        apiUrl: normalizedSettings.apiUrl,
        username: normalizedSettings.username,
        enabled: normalizedSettings.enabled,
        passwordLength: normalizedSettings.password.length
      })
      
    } catch (error) {
      console.error('Error saving WordPress settings:', error)
      toast({
        title: "L·ªói",
        description: `Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t: ${(error as Error).message}`,
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleTestConnection = async () => {
    if (!settings.apiUrl || !settings.username || !settings.password) {
      toast({
        title: "L·ªói",
        description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin k·∫øt n·ªëi",
        variant: "destructive",
      })
      return
    }

    setIsTestingConnection(true)
    setTestResult(null)
    
    const normalizedUrl = normalizeApiUrl(settings.apiUrl)
    
    try {
      // First, test if the API endpoint exists
      console.log('Testing API endpoint:', normalizedUrl)
      
      const response = await fetch(`${normalizedUrl}/posts?per_page=1`, {
        method: 'GET',
        headers: {
          'Authorization': `Basic ${btoa(`${settings.username}:${settings.password}`)}`,
          'Content-Type': 'application/json',
        },
      })

      console.log('Response status:', response.status)
      console.log('Response headers:', response.headers)

      if (response.ok) {
        const data = await response.json()
        setTestResult({
          status: 'success',
          message: 'K·∫øt n·ªëi WordPress th√†nh c√¥ng!',
          details: `T√¨m th·∫•y ${Array.isArray(data) ? data.length : 0} b√†i vi·∫øt`
        })
        
        toast({
          title: "Th√†nh c√¥ng",
          description: "K·∫øt n·ªëi WordPress th√†nh c√¥ng!",
        })
      } else {
        const errorText = await response.text()
        let suggestions: string[] = []
        
        if (response.status === 404) {
          suggestions = [
            'Ki·ªÉm tra URL c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng: https://yoursite.com/wp-json/wp/v2',
            'ƒê·∫£m b·∫£o WordPress ƒë√£ b·∫≠t REST API',
            'Th·ª≠ truy c·∫≠p URL tr·ª±c ti·∫øp tr√™n tr√¨nh duy·ªát',
            'Ki·ªÉm tra t√™n mi·ªÅn c√≥ ho·∫°t ƒë·ªông kh√¥ng'
          ]
        } else if (response.status === 401) {
          suggestions = [
            'Ki·ªÉm tra t√™n ƒëƒÉng nh·∫≠p c√≥ ƒë√∫ng kh√¥ng',
            'ƒê·∫£m b·∫£o d√πng Application Password, kh√¥ng ph·∫£i m·∫≠t kh·∫©u th∆∞·ªùng',
            'T·∫°o l·∫°i Application Password m·ªõi'
          ]
        } else if (response.status === 403) {
          suggestions = [
            'T√†i kho·∫£n c·∫ßn quy·ªÅn Editor ho·∫∑c Administrator',
            'Ki·ªÉm tra plugin b·∫£o m·∫≠t c√≥ ch·∫∑n API kh√¥ng',
            'Th·ª≠ v·ªõi t√†i kho·∫£n Administrator'
          ]
        }
        
        setTestResult({
          status: 'error',
          message: `L·ªói ${response.status}: ${response.statusText}`,
          details: errorText,
          suggestions
        })
        
        toast({
          title: "L·ªói k·∫øt n·ªëi",
          description: `Kh√¥ng th·ªÉ k·∫øt n·ªëi: ${response.status} ${response.statusText}`,
          variant: "destructive",
        })
      }
    } catch (error: any) {
      console.error('Connection error:', error)
      
      let suggestions: string[] = []
      if (error.message.includes('Failed to fetch') || error.message.includes('Network')) {
        suggestions = [
          'Ki·ªÉm tra k·∫øt n·ªëi internet',
          'ƒê·∫£m b·∫£o trang WordPress c√≥ th·ªÉ truy c·∫≠p',
          'Ki·ªÉm tra CORS settings tr√™n WordPress',
          'Th·ª≠ t·∫Øt t∆∞·ªùng l·ª≠a/antivirus t·∫°m th·ªùi'
        ]
      }
      
      setTestResult({
        status: 'error',
        message: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn WordPress',
        details: error.message,
        suggestions
      })
      
      toast({
        title: "L·ªói k·∫øt n·ªëi",
        description: `Kh√¥ng th·ªÉ k·∫øt n·ªëi: ${error.message}`,
        variant: "destructive",
      })
    } finally {
      setIsTestingConnection(false)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "ƒê√£ copy",
      description: "ƒê√£ copy v√†o clipboard",
    })
  }

  const testApiInBrowser = () => {
    const normalizedUrl = normalizeApiUrl(settings.apiUrl)
    window.open(`${normalizedUrl}/posts?per_page=1`, '_blank')
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">C√†i ƒë·∫∑t WordPress</h1>
          <p className="text-gray-600 mt-1">C·∫•u h√¨nh t√≠ch h·ª£p v·ªõi WordPress CMS</p>
        </div>
        <div className="flex items-center gap-2">
          {settings.enabled ? (
            <Badge variant="outline" className="text-green-600 border-green-600">
              <Cloud className="w-4 h-4 mr-1" />
              ƒê√£ k√≠ch ho·∫°t
            </Badge>
          ) : (
            <Badge variant="outline" className="text-gray-600 border-gray-600">
              <CloudOff className="w-4 h-4 mr-1" />
              Ch∆∞a k√≠ch ho·∫°t
            </Badge>
          )}
        </div>
      </div>

      {/* Test Result */}
      {testResult && (
        <Card className={testResult.status === 'success' ? 'border-green-200' : 'border-red-200'}>
          <CardContent className="p-4">
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                {testResult.status === 'success' ? (
                  <CheckCircle className="w-5 h-5 text-green-600" />
                ) : (
                  <AlertCircle className="w-5 h-5 text-red-600" />
                )}
                <span className={`font-medium ${testResult.status === 'success' ? 'text-green-600' : 'text-red-600'}`}>
                  {testResult.message}
                </span>
              </div>
              
              {testResult.details && (
                <div className="bg-gray-50 p-3 rounded text-sm">
                  <strong>Chi ti·∫øt:</strong> {testResult.details}
                </div>
              )}
              
              {testResult.suggestions && testResult.suggestions.length > 0 && (
                <div className="bg-yellow-50 p-3 rounded">
                  <div className="flex items-start gap-2">
                    <AlertTriangle className="w-4 h-4 text-yellow-600 mt-0.5" />
                    <div>
                      <p className="font-medium text-yellow-800 mb-2">G·ª£i √Ω kh·∫Øc ph·ª•c:</p>
                      <ul className="list-disc list-inside space-y-1 text-sm text-yellow-700">
                        {testResult.suggestions.map((suggestion, index) => (
                          <li key={index}>{suggestion}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Basic Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Settings className="w-5 h-5" />
            C√†i ƒë·∫∑t c∆° b·∫£n
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="space-y-4">
            <div>
              <Label htmlFor="apiUrl">URL WordPress API *</Label>
              <div className="flex gap-2">
                <Input
                  id="apiUrl"
                  type="url"
                  placeholder="https://vhdcom.local ho·∫∑c https://your-site.com"
                  value={settings.apiUrl}
                  onChange={(e) => setSettings(prev => ({ ...prev, apiUrl: e.target.value }))}
                  className={!validateApiUrl(normalizeApiUrl(settings.apiUrl)) && settings.apiUrl ? 'border-yellow-300' : ''}
                />
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => copyToClipboard(normalizeApiUrl(settings.apiUrl))}
                  disabled={!settings.apiUrl}
                >
                  <Copy className="w-4 h-4" />
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={testApiInBrowser}
                  disabled={!settings.apiUrl}
                >
                  <ExternalLink className="w-4 h-4" />
                </Button>
              </div>
              <div className="mt-2 space-y-1">
                <p className="text-sm text-gray-600">
                  URL s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông chu·∫©n h√≥a th√†nh: <code className="bg-gray-100 px-1 rounded">{normalizeApiUrl(settings.apiUrl) || 'https://your-site.com/wp-json/wp/v2'}</code>
                </p>
                {settings.apiUrl && !validateApiUrl(normalizeApiUrl(settings.apiUrl)) && (
                  <p className="text-sm text-yellow-600 flex items-center gap-1">
                    <AlertTriangle className="w-4 h-4" />
                    URL s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông th√™m "/wp-json/wp/v2"
                  </p>
                )}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="username">T√™n ƒëƒÉng nh·∫≠p *</Label>
                <Input
                  id="username"
                  type="text"
                  placeholder="duong"
                  value={settings.username}
                  onChange={(e) => setSettings(prev => ({ ...prev, username: e.target.value }))}
                />
                <p className="text-sm text-gray-600 mt-1">T√™n ƒëƒÉng nh·∫≠p WordPress c·ªßa b·∫°n</p>
              </div>
              <div>
                <Label htmlFor="password">M·∫≠t kh·∫©u ·ª©ng d·ª•ng *</Label>
                <Input
                  id="password"
                  type="password"
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                  value={settings.password}
                  onChange={(e) => setSettings(prev => ({ ...prev, password: e.target.value }))}
                />
                <p className="text-sm text-gray-600 mt-1">Application Password (kh√¥ng ph·∫£i m·∫≠t kh·∫©u th∆∞·ªùng)</p>
              </div>
            </div>

            <div className="bg-blue-50 p-4 rounded-lg">
              <div className="flex items-start gap-2">
                <Info className="w-5 h-5 text-blue-600 mt-0.5" />
                <div className="text-sm text-blue-800">
                  <p className="font-medium mb-1">L∆∞u √Ω b·∫£o m·∫≠t:</p>
                  <ul className="list-disc list-inside space-y-1">
                    <li>S·ª≠ d·ª•ng Application Password thay v√¨ m·∫≠t kh·∫©u th∆∞·ªùng</li>
                    <li>T·∫°o Application Password: Users ‚Üí Profile ‚Üí Application Passwords</li>
                    <li>ƒê·∫£m b·∫£o t√†i kho·∫£n c√≥ quy·ªÅn qu·∫£n l√Ω b√†i vi·∫øt</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>

          <Separator />

          <div className="flex items-center justify-between">
            <div>
              <Label className="text-base font-medium">K√≠ch ho·∫°t t√≠ch h·ª£p WordPress</Label>
              <p className="text-sm text-gray-600">B·∫≠t/t·∫Øt ƒë·ªìng b·ªô v·ªõi WordPress</p>
            </div>
            <Switch
              checked={settings.enabled}
              onCheckedChange={(checked) => setSettings(prev => ({ ...prev, enabled: checked }))}
            />
          </div>
        </CardContent>
      </Card>

      {/* Quick Test Section */}
      <Card>
        <CardHeader>
          <CardTitle>Ki·ªÉm tra nhanh</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <Button
                onClick={testApiInBrowser}
                disabled={!settings.apiUrl}
                variant="outline"
                className="justify-start"
              >
                <ExternalLink className="w-4 h-4 mr-2" />
                M·ªü API trong tr√¨nh duy·ªát
              </Button>
              
              <Button
                onClick={() => copyToClipboard(normalizeApiUrl(settings.apiUrl))}
                disabled={!settings.apiUrl}
                variant="outline"
                className="justify-start"
              >
                <Copy className="w-4 h-4 mr-2" />
                Copy URL API
              </Button>
            </div>
            
            <div className="bg-gray-50 p-3 rounded text-sm">
              <p className="font-medium mb-1">Ki·ªÉm tra th·ªß c√¥ng:</p>
              <ol className="list-decimal list-inside space-y-1 text-gray-600">
                <li>Click "M·ªü API trong tr√¨nh duy·ªát" ƒë·ªÉ ki·ªÉm tra API c√≥ ho·∫°t ƒë·ªông kh√¥ng</li>
                <li>N·∫øu th·∫•y JSON data ‚Üí API ho·∫°t ƒë·ªông t·ªët</li>
                <li>N·∫øu th·∫•y l·ªói 404 ‚Üí Ki·ªÉm tra l·∫°i URL WordPress</li>
                <li>N·∫øu th·∫•y l·ªói x√°c th·ª±c ‚Üí T·∫°o l·∫°i Application Password</li>
              </ol>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Auto-Sync Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="w-5 h-5 text-blue-600" />
            ƒê·ªìng b·ªô t·ª± ƒë·ªông
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* WordPress Sync Toggle */}
          <div className="flex items-center justify-between">
            <div>
              <Label className="text-base font-medium">K√≠ch ho·∫°t ƒë·ªìng b·ªô WordPress</Label>
              <p className="text-sm text-gray-600">B·∫≠t/t·∫Øt t√≠nh nƒÉng ƒë·ªìng b·ªô v·ªõi WordPress</p>
            </div>
            <div className="flex items-center gap-2">
              {wpSyncEnabled ? (
                <Badge variant="outline" className="text-green-600 border-green-600">
                  <Activity className="w-4 h-4 mr-1" />
                  ƒê√£ b·∫≠t
                </Badge>
              ) : (
                <Badge variant="outline" className="text-gray-600 border-gray-600">
                  <CloudOff className="w-4 h-4 mr-1" />
                  ƒê√£ t·∫Øt
                </Badge>
              )}
              <Switch
                checked={wpSyncEnabled}
                onCheckedChange={toggleWordPressSync}
              />
            </div>
          </div>

          <Separator />

          {/* Auto-Sync Toggle */}
          <div className="flex items-center justify-between">
            <div>
              <Label className="text-base font-medium">T·ª± ƒë·ªông ƒë·ªìng b·ªô khi th√™m tin t·ª©c</Label>
              <p className="text-sm text-gray-600">
                T·ª± ƒë·ªông t·∫°o b√†i vi·∫øt WordPress khi th√™m tin t·ª©c m·ªõi t·ª´ admin
              </p>
            </div>
            <div className="flex items-center gap-2">
              {autoSyncEnabled ? (
                <Badge variant="outline" className="text-blue-600 border-blue-600">
                  <Zap className="w-4 h-4 mr-1" />
                  T·ª± ƒë·ªông
                </Badge>
              ) : (
                <Badge variant="outline" className="text-gray-600 border-gray-600">
                  Th·ªß c√¥ng
                </Badge>
              )}
              <Switch
                checked={autoSyncEnabled}
                onCheckedChange={toggleAutoSync}
                disabled={!wpSyncEnabled}
              />
            </div>
          </div>

          {/* Sync Status */}
          {lastSyncStatus && (
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex items-start gap-2">
                <Activity className="w-5 h-5 text-blue-600 mt-0.5" />
                <div>
                  <p className="font-medium text-gray-900 mb-1">Tr·∫°ng th√°i ƒë·ªìng b·ªô g·∫ßn nh·∫•t:</p>
                  <p className="text-sm text-gray-700">{lastSyncStatus}</p>
                  <p className="text-xs text-gray-500 mt-1">
                    C·∫≠p nh·∫≠t l√∫c: {new Date().toLocaleString('vi-VN')}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Bidirectional Sync Toggle */}
          <Separator />
          
          <div className="flex items-center justify-between">
            <div>
              <Label className="text-base font-medium">ƒê·ªìng b·ªô 2 chi·ªÅu</Label>
              <p className="text-sm text-gray-600">
                ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª´ WordPress v·ªÅ h·ªá th·ªëng v√† ng∆∞·ª£c l·∫°i
              </p>
            </div>
            <div className="flex items-center gap-2">
              {bidirectionalSyncEnabled ? (
                <Badge variant="outline" className="text-purple-600 border-purple-600">
                  <RefreshCw className="w-4 h-4 mr-1" />
                  2 chi·ªÅu
                </Badge>
              ) : (
                <Badge variant="outline" className="text-gray-600 border-gray-600">
                  1 chi·ªÅu
                </Badge>
              )}
              <Switch
                checked={bidirectionalSyncEnabled}
                onCheckedChange={toggleBidirectionalSync}
                disabled={!wpSyncEnabled}
              />
            </div>
          </div>

          {/* Manual Sync Buttons */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Button
              onClick={syncWithWordPress}
              disabled={!wpSyncEnabled || isSyncing}
              variant="outline"
              className="flex-1"
            >
              <Cloud className={`w-4 h-4 mr-2 ${isSyncing ? 'animate-spin' : ''}`} />
              {isSyncing ? 'ƒêang ƒë·ªìng b·ªô...' : 'L√™n WordPress'}
            </Button>
            
            <Button
              onClick={syncFromWordPress}
              disabled={!wpSyncEnabled || isSyncing}
              variant="outline"
              className="flex-1"
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${isSyncing ? 'animate-spin' : ''}`} />
              {isSyncing ? 'ƒêang t·∫£i...' : 'T·ª´ WordPress'}
            </Button>
            
            <Button
              onClick={syncBidirectional}
              disabled={!bidirectionalSyncEnabled || isSyncing}
              variant="default"
              className="flex-1"
            >
              <Zap className={`w-4 h-4 mr-2 ${isSyncing ? 'animate-spin' : ''}`} />
              {isSyncing ? 'ƒêang ƒë·ªìng b·ªô...' : 'ƒê·ªìng b·ªô 2 chi·ªÅu'}
            </Button>
          </div>

          {/* Auto-Sync Info */}
          <div className="bg-blue-50 p-4 rounded-lg">
            <div className="flex items-start gap-2">
              <Info className="w-5 h-5 text-blue-600 mt-0.5" />
              <div className="text-sm text-blue-800">
                <p className="font-medium mb-1">C√°ch ho·∫°t ƒë·ªông c·ªßa t·ª± ƒë·ªông ƒë·ªìng b·ªô tin t·ª©c:</p>
                <ul className="list-disc list-inside space-y-1">
                  <li>Khi t·∫°o tin t·ª©c m·ªõi ‚Üí T·ª± ƒë·ªông l∆∞u l√™n WordPress</li>
                  <li>Khi c·∫≠p nh·∫≠t tin t·ª©c ‚Üí T·ª± ƒë·ªông c·∫≠p nh·∫≠t b√†i vi·∫øt WordPress</li>
                  <li>Khi x√≥a tin t·ª©c ‚Üí T·ª± ƒë·ªông x√≥a b√†i vi·∫øt WordPress</li>
                  <li>Tin t·ª©c s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh HTML c√≥ ƒë·ªãnh d·∫°ng ƒë·∫πp</li>
                  <li>Bao g·ªìm ·∫£nh ƒë·∫°i di·ªán, th∆∞ vi·ªán ·∫£nh v√† metadata ƒë·∫ßy ƒë·ªß</li>
                  <li>D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ an to√†n tr√™n WordPress database</li>
                </ul>
              </div>
            </div>
          </div>
          
          {/* Bidirectional Sync Info */}
          {bidirectionalSyncEnabled && (
            <div className="bg-purple-50 p-4 rounded-lg">
              <div className="flex items-start gap-2">
                <RefreshCw className="w-5 h-5 text-purple-600 mt-0.5" />
                <div className="text-sm text-purple-800">
                  <p className="font-medium mb-1">ƒê·ªìng b·ªô 2 chi·ªÅu ƒë∆∞·ª£c k√≠ch ho·∫°t:</p>
                  <ul className="list-disc list-inside space-y-1">
                    <li>T·ª± ƒë·ªông t·∫£i tin t·ª©c m·ªõi t·ª´ WordPress v·ªÅ h·ªá th·ªëng</li>
                    <li>ƒê·ªìng b·ªô thay ƒë·ªïi trong c·∫£ 2 h∆∞·ªõng</li>
                    <li>WordPress tr·ªü th√†nh ngu·ªìn d·ªØ li·ªáu ch√≠nh (primary source)</li>
                    <li>D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ b·ªÅn v·ªØng tr√™n WordPress</li>
                    <li>Conflict resolution: WordPress data ∆∞u ti√™n</li>
                  </ul>
                </div>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Events Auto-Sync Settings */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="w-5 h-5 text-green-600" />
            ƒê·ªìng b·ªô t·ª± ƒë·ªông - S·ª± ki·ªán
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Events WordPress Sync Toggle */}
          <div className="flex items-center justify-between">
            <div>
              <Label className="text-base font-medium">K√≠ch ho·∫°t ƒë·ªìng b·ªô WordPress cho s·ª± ki·ªán</Label>
              <p className="text-sm text-gray-600">B·∫≠t/t·∫Øt t√≠nh nƒÉng ƒë·ªìng b·ªô s·ª± ki·ªán v·ªõi WordPress</p>
            </div>
            <div className="flex items-center gap-2">
              {eventsWpSyncEnabled ? (
                <Badge variant="outline" className="text-green-600 border-green-600">
                  <Activity className="w-4 h-4 mr-1" />
                  ƒê√£ b·∫≠t
                </Badge>
              ) : (
                <Badge variant="outline" className="text-gray-600 border-gray-600">
                  <CloudOff className="w-4 h-4 mr-1" />
                  ƒê√£ t·∫Øt
                </Badge>
              )}
              <Switch
                checked={eventsWpSyncEnabled}
                onCheckedChange={toggleEventsWordPressSync}
              />
            </div>
          </div>

          <Separator />

          {/* Events Auto-Sync Toggle */}
          <div className="flex items-center justify-between">
            <div>
              <Label className="text-base font-medium">T·ª± ƒë·ªông ƒë·ªìng b·ªô khi th√™m s·ª± ki·ªán</Label>
              <p className="text-sm text-gray-600">
                T·ª± ƒë·ªông t·∫°o b√†i vi·∫øt WordPress khi th√™m s·ª± ki·ªán m·ªõi t·ª´ admin
              </p>
            </div>
            <div className="flex items-center gap-2">
              {eventsAutoSyncEnabled ? (
                <Badge variant="outline" className="text-blue-600 border-blue-600">
                  <Zap className="w-4 h-4 mr-1" />
                  T·ª± ƒë·ªông
                </Badge>
              ) : (
                <Badge variant="outline" className="text-gray-600 border-gray-600">
                  Th·ªß c√¥ng
                </Badge>
              )}
              <Switch
                checked={eventsAutoSyncEnabled}
                onCheckedChange={toggleEventsAutoSync}
                disabled={!eventsWpSyncEnabled}
              />
            </div>
          </div>

          {/* Events Sync Status */}
          {eventsLastSyncStatus && (
            <div className="bg-gray-50 p-4 rounded-lg">
              <div className="flex items-start gap-2">
                <Activity className="w-5 h-5 text-green-600 mt-0.5" />
                <div>
                  <p className="font-medium text-gray-900 mb-1">Tr·∫°ng th√°i ƒë·ªìng b·ªô s·ª± ki·ªán g·∫ßn nh·∫•t:</p>
                  <p className="text-sm text-gray-700">{eventsLastSyncStatus}</p>
                  <p className="text-xs text-gray-500 mt-1">
                    C·∫≠p nh·∫≠t l√∫c: {new Date().toLocaleString('vi-VN')}
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Events Manual Sync Button */}
          <div className="flex gap-4">
            <Button
              onClick={syncEventsWithWordPress}
              disabled={!eventsWpSyncEnabled || isEventsSyncing}
              variant="outline"
              className="flex-1"
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${isEventsSyncing ? 'animate-spin' : ''}`} />
              {isEventsSyncing ? 'ƒêang ƒë·ªìng b·ªô s·ª± ki·ªán...' : 'ƒê·ªìng b·ªô s·ª± ki·ªán th·ªß c√¥ng'}
            </Button>
          </div>

          {/* Events Auto-Sync Info */}
          <div className="bg-green-50 p-4 rounded-lg">
            <div className="flex items-start gap-2">
              <Info className="w-5 h-5 text-green-600 mt-0.5" />
              <div className="text-sm text-green-800">
                <p className="font-medium mb-1">C√°ch ho·∫°t ƒë·ªông c·ªßa t·ª± ƒë·ªông ƒë·ªìng b·ªô s·ª± ki·ªán:</p>
                <ul className="list-disc list-inside space-y-1">
                  <li>Khi t·∫°o s·ª± ki·ªán m·ªõi ‚Üí T·ª± ƒë·ªông t·∫°o b√†i vi·∫øt WordPress</li>
                  <li>Khi c·∫≠p nh·∫≠t s·ª± ki·ªán ‚Üí T·ª± ƒë·ªông c·∫≠p nh·∫≠t b√†i vi·∫øt WordPress</li>
                  <li>Khi x√≥a s·ª± ki·ªán ‚Üí T·ª± ƒë·ªông x√≥a b√†i vi·∫øt WordPress</li>
                  <li>S·ª± ki·ªán s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi th√†nh HTML c√≥ ƒë·ªãnh d·∫°ng</li>
                  <li>Bao g·ªìm th√¥ng tin chi ti·∫øt: ng√†y, gi·ªù, ƒë·ªãa ƒëi·ªÉm, s·ªë l∆∞·ª£ng tham gia</li>
                </ul>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Form Validation Status */}
      <Card className="border-l-4 border-l-emerald-500">
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className={`w-3 h-3 rounded-full ${
                settings.apiUrl.trim() && settings.username.trim() && settings.password.trim()
                  ? 'bg-emerald-500' 
                  : 'bg-gray-300'
              }`}></div>
              <span className="font-medium text-gray-900">
                Tr·∫°ng th√°i form: {
                  settings.apiUrl.trim() && settings.username.trim() && settings.password.trim()
                    ? 'S·∫µn s√†ng l∆∞u' 
                    : 'Ch∆∞a ƒë·∫ßy ƒë·ªß th√¥ng tin'
                }
              </span>
            </div>
            <div className="flex items-center gap-4">
              <div className={`flex items-center gap-1 text-sm ${
                settings.apiUrl.trim() ? 'text-emerald-600' : 'text-gray-400'
              }`}>
                <CheckCircle className="w-4 h-4" />
                URL
              </div>
              <div className={`flex items-center gap-1 text-sm ${
                settings.username.trim() ? 'text-emerald-600' : 'text-gray-400'
              }`}>
                <CheckCircle className="w-4 h-4" />
                Username
              </div>
              <div className={`flex items-center gap-1 text-sm ${
                settings.password.trim() ? 'text-emerald-600' : 'text-gray-400'
              }`}>
                <CheckCircle className="w-4 h-4" />
                Password
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Actions */}
      <div className="flex flex-wrap gap-4">
        <Button
          onClick={handleTestConnection}
          disabled={isTestingConnection || !settings.apiUrl || !settings.username || !settings.password}
          variant="outline"
        >
          <TestTube className={`w-4 h-4 mr-2 ${isTestingConnection ? 'animate-spin' : ''}`} />
          {isTestingConnection ? 'ƒêang ki·ªÉm tra...' : 'Ki·ªÉm tra k·∫øt n·ªëi'}
        </Button>

        <div className="relative group">
          <Button
            onClick={handleSaveSettings}
            disabled={isLoading || !settings.apiUrl.trim() || !settings.username.trim() || !settings.password.trim()}
            className={`${
              !settings.apiUrl.trim() || !settings.username.trim() || !settings.password.trim()
                ? 'bg-gray-400 hover:bg-gray-500 cursor-not-allowed'
                : 'bg-emerald-600 hover:bg-emerald-700 shadow-lg hover:shadow-xl'
            } transition-all duration-200 relative`}
            size="lg"
          >
            <Save className={`w-4 h-4 mr-2 ${isLoading ? 'animate-pulse' : ''}`} />
            {isLoading ? (
              <span className="flex items-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                ƒêang l∆∞u c√†i ƒë·∫∑t...
              </span>
            ) : (
              <span className="flex items-center gap-2">
                L∆∞u c√†i ƒë·∫∑t
                <kbd className="hidden sm:inline-flex items-center px-1.5 py-0.5 border border-white/20 text-xs font-mono bg-white/10 rounded">
                  Ctrl+S
                </kbd>
              </span>
            )}
          </Button>
          
          {/* Tooltip for disabled state */}
          {(!settings.apiUrl.trim() || !settings.username.trim() || !settings.password.trim()) && (
            <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-800 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10">
              Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ l∆∞u c√†i ƒë·∫∑t
              <div className="absolute top-full left-1/2 transform -translate-x-1/2 w-2 h-2 bg-gray-800 rotate-45"></div>
            </div>
          )}
        </div>

        <Button
          variant="destructive"
          size="default"
          onClick={() => {
            if (confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu l∆∞u tr·ªØ?\n\nH√†nh ƒë·ªông n√†y s·∫Ω:\n- X√≥a t·∫•t c·∫£ tin t·ª©c v√† s·ª± ki·ªán ƒë√£ t·∫°o\n- Reset c√†i ƒë·∫∑t WordPress\n- X√≥a d·ªØ li·ªáu ƒëƒÉng nh·∫≠p\n- T·∫£i l·∫°i trang\n\nKh√¥ng th·ªÉ ho√†n t√°c!')) {
              try {
                const storageKeys = ['newsItems', 'eventsItems', 'wpSyncEnabled', 'wordpressSettings', 'adminUser', 'darkMode']
                storageKeys.forEach(key => localStorage.removeItem(key))
                
                toast({
                  title: "Th√†nh c√¥ng",
                  description: "ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu l∆∞u tr·ªØ. Trang s·∫Ω ƒë∆∞·ª£c t·∫£i l·∫°i.",
                })
                
                setTimeout(() => window.location.reload(), 1500)
              } catch (error) {
                toast({
                  title: "L·ªói",
                  description: "Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu l∆∞u tr·ªØ",
                  variant: "destructive",
                })
              }
            }
          }}
          className="border-red-300 text-white bg-red-600 hover:bg-red-700"
        >
          <AlertTriangle className="w-4 h-4 mr-2" />
          X√≥a d·ªØ li·ªáu l∆∞u tr·ªØ
        </Button>
      </div>

      {/* Troubleshooting Guide */}
      <Card>
        <CardHeader>
          <CardTitle>H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c l·ªói 404</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6 text-sm">
            <div className="bg-red-50 p-4 rounded-lg">
              <div className="flex items-start gap-2">
                <AlertCircle className="w-5 h-5 text-red-600 mt-0.5" />
                <div>
                  <p className="font-medium text-red-800 mb-2">L·ªói 404 "rest_no_route" - Nguy√™n nh√¢n v√† c√°ch kh·∫Øc ph·ª•c:</p>
                  <ul className="list-disc list-inside space-y-1 text-red-700">
                    <li>URL WordPress kh√¥ng ƒë√∫ng ho·∫∑c kh√¥ng t·ªìn t·∫°i</li>
                    <li>WordPress REST API b·ªã t·∫Øt ho·∫∑c b·ªã ch·∫∑n</li>
                    <li>Plugin b·∫£o m·∫≠t ch·∫∑n API requests</li>
                    <li>C·∫•u h√¨nh server kh√¥ng h·ªó tr·ª£ REST API</li>
                  </ul>
                </div>
              </div>
            </div>

            <div>
              <h4 className="font-medium mb-3 text-red-600">üîß C√°c b∆∞·ªõc kh·∫Øc ph·ª•c theo th·ª© t·ª±:</h4>
              
              <div className="space-y-4">
                <div className="border-l-4 border-blue-500 pl-4">
                  <h5 className="font-medium mb-2">1. Ki·ªÉm tra URL c∆° b·∫£n:</h5>
                  <ul className="list-disc list-inside space-y-1 text-gray-600 ml-4">
                    <li>ƒê·∫£m b·∫£o <code className="bg-gray-100 px-1 rounded">http://vhdcom.local</code> c√≥ th·ªÉ truy c·∫≠p ƒë∆∞·ª£c</li>
                    <li>Th·ª≠ truy c·∫≠p: <code className="bg-gray-100 px-1 rounded">http://vhdcom.local/wp-admin</code></li>
                    <li>N·∫øu kh√¥ng v√†o ƒë∆∞·ª£c ‚Üí Ki·ªÉm tra XAMPP/Local server</li>
                  </ul>
                </div>

                <div className="border-l-4 border-green-500 pl-4">
                  <h5 className="font-medium mb-2">2. Ki·ªÉm tra WordPress REST API:</h5>
                  <ul className="list-disc list-inside space-y-1 text-gray-600 ml-4">
                    <li>Truy c·∫≠p: <code className="bg-gray-100 px-1 rounded">http://vhdcom.local/wp-json/wp/v2</code></li>
                    <li>N·∫øu th·∫•y JSON ‚Üí API ho·∫°t ƒë·ªông</li>
                    <li>N·∫øu th·∫•y 404 ‚Üí API b·ªã t·∫Øt ho·∫∑c URL sai</li>
                  </ul>
                </div>

                <div className="border-l-4 border-yellow-500 pl-4">
                  <h5 className="font-medium mb-2">3. Ki·ªÉm tra c·∫•u h√¨nh WordPress:</h5>
                  <ul className="list-disc list-inside space-y-1 text-gray-600 ml-4">
                    <li>V√†o WordPress Admin ‚Üí Settings ‚Üí Permalinks</li>
                    <li>Ch·ªçn "Post name" ho·∫∑c "Custom Structure"</li>
                    <li>Click "Save Changes" ƒë·ªÉ refresh rewrite rules</li>
                  </ul>
                </div>

                <div className="border-l-4 border-purple-500 pl-4">
                  <h5 className="font-medium mb-2">4. Ki·ªÉm tra plugins:</h5>
                  <ul className="list-disc list-inside space-y-1 text-gray-600 ml-4">
                    <li>T·∫°m th·ªùi t·∫Øt t·∫•t c·∫£ plugins</li>
                    <li>Test API l·∫°i</li>
                    <li>N·∫øu ho·∫°t ƒë·ªông ‚Üí B·∫≠t t·ª´ng plugin ƒë·ªÉ t√¨m plugin g√¢y l·ªói</li>
                  </ul>
                </div>

                <div className="border-l-4 border-orange-500 pl-4">
                  <h5 className="font-medium mb-2">5. Th√™m code v√†o functions.php (n·∫øu c·∫ßn):</h5>
                  <div className="bg-gray-100 p-3 rounded mt-2">
                    <code className="text-sm">
                      {`// ƒê·∫£m b·∫£o REST API ho·∫°t ƒë·ªông
add_action('rest_api_init', function() {
    remove_filter('rest_pre_serve_request', 'rest_send_cors_headers');
    add_filter('rest_pre_serve_request', function($value) {
        header('Access-Control-Allow-Origin: *');
        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
        header('Access-Control-Allow-Headers: Content-Type, Authorization');
        return $value;
    });
});`}
                    </code>
                  </div>
                </div>
              </div>
            </div>

            <div className="bg-green-50 p-4 rounded-lg">
              <div className="flex items-start gap-2">
                <CheckCircle className="w-5 h-5 text-green-600 mt-0.5" />
                <div>
                  <p className="font-medium text-green-800 mb-2">Test th√†nh c√¥ng khi:</p>
                  <ul className="list-disc list-inside space-y-1 text-green-700">
                    <li>Truy c·∫≠p <code className="bg-green-100 px-1 rounded">http://vhdcom.local/wp-json/wp/v2/posts</code> th·∫•y JSON</li>
                    <li>N√∫t "Ki·ªÉm tra k·∫øt n·ªëi" hi·ªÉn th·ªã m√†u xanh</li>
                    <li>C√≥ th·ªÉ t·∫°o v√† ƒë·ªìng b·ªô b√†i vi·∫øt t·ª´ admin panel</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Auto-Sync Manager Section */}
      <Card className="border-blue-200 bg-blue-50/50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-blue-800">
            <Zap className="h-5 w-5" />
            <span>Auto-Sync Manager</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <AutoSyncManager />
        </CardContent>
      </Card>

      {/* Data Import Manager Section */}
      <Card className="border-green-200 bg-green-50/50">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2 text-green-800">
            <Activity className="h-5 w-5" />
            <span>Data Import Manager</span>
            <Badge variant="outline" className="bg-green-100 text-green-700 border-green-300">
              Beta
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <DataImportManager />
        </CardContent>
      </Card>
    </div>
  )
} 